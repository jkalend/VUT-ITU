generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  email    String      @id @unique
  username String      @unique
  AiThread String?
  stgDays  Int         @default(3)
  posts    Post[]      @relation("UserPost")
  plants   Plant[]     @relation("UserPlant")
  likes    Post[]      @relation("LikedPosts")
  comments Comment[]   @relation("UserComment")
  groups   ChatGroup[] @relation("UserChatGroup")
  messages Message[]   @relation("UserMessage")
}

model Comment {
  commentId   Int      @id @default(autoincrement())
  dateCreated DateTime @default(now())
  text        String
  email       String
  postId      Int
  author      User     @relation("UserComment", fields: [email], references: [email])
  on          Post     @relation("PostComment", fields: [postId], references: [postId], onDelete: Cascade)
}

model Post {
  postId      Int       @id @default(autoincrement())
  dateCreated DateTime  @default(now())
  image       String
  email       String
  description String
  creator     User      @relation("UserPost", fields: [email], references: [email])
  likedBy     User[]    @relation("LikedPosts")
  comments    Comment[] @relation("PostComment")
}

model LikedPosts {
  A Int
  B String

  @@unique([A, B], map: "_LikedPosts_AB_unique")
  @@index([B], map: "_LikedPosts_B_index")
  @@map("_LikedPosts")
}

model Species {
  speciesId      Int     @id @default(autoincrement())
  name           String
  wateringPeriod Int
  wateringAmount Int
  speciesImage   String
  plants         Plant[] @relation("PlantSpecies")
}

model Plant {
  plantId      Int        @id @default(autoincrement())
  nickname     String?
  customImage  String?
  description  String?
  speciesId    Int
  email        String
  speciesImage Boolean    @default(true)
  species      Species    @relation("PlantSpecies", fields: [speciesId], references: [speciesId])
  user         User       @relation("UserPlant", fields: [email], references: [email])
  waterings    Watering[] @relation("PlantWatering")
}

model Watering {
  wateringId  Int      @id @default(autoincrement())
  dateWatered DateTime @default(now())
  amount      Int
  plantId     Int
  plant       Plant    @relation("PlantWatering", fields: [plantId], references: [plantId], onDelete: Cascade)
}

model ChatGroup {
  groupId    Int       @id @default(autoincrement())
  name       String
  ownerEmail String
  creator    String
  users      User[]    @relation("UserChatGroup")
  messages   Message[] @relation("MessageChatGroup")
}

model Message {
  messageId   Int       @id @default(autoincrement())
  text        String    @db.VarChar(505)
  dateCreated DateTime  @default(now())
  email       String
  groupId     Int
  author      User      @relation("UserMessage", fields: [email], references: [email])
  group       ChatGroup @relation("MessageChatGroup", fields: [groupId], references: [groupId])
}

model UserChatGroup {
  A Int
  B String

  @@unique([A, B], map: "_UserChatGroup_AB_unique")
  @@index([B], map: "_UserChatGroup_B_index")
  @@map("_UserChatGroup")
}
